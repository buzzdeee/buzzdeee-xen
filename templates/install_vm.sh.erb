#!/bin/sh

#Read all the passed command line parameters and values and assign to correct shell variables

BATCH='false'
OSINPUT='AUTO'
NAME='AUTO'
VMMEM='AUTO'
VMMAXMEM='AUTO'
VMCPUS='AUTO'
VMDISKSIZE='AUTO'
VMMAC='AUTO'
VMDISK='AUTO'
VMSTOREDIR="<%= @vmstoredir %>"
VMBRIDGE='AUTO'
NOW=`date +%Y-%m-%d-%H-%M`
XENVMDIR="<%= @xenvmdir %>"
ILOOKUP=''
PROHIBIT_VMCPUS=<%= @prohibit_vmcpus %>

usage () {
	echo "  $0"
	echo " "
	echo "  The install_vm script to install VMs requires as the only required parameter --name=<FQDN>"
	echo " "
        echo "  Optional parameters are either read from existing VM or default values are used:"
        echo "  --operating_system=<supported OS | AUTO> (default is SLES11SP3)"
	echo "    Supported OSes: <% @ossettings.each do |os, settings| %><%= "#{os} "%><% end %>"
	echo "  --memory=<value in MB | AUTO> (default is 1024)"
	echo "  --max_memory=<value in MB | AUTO> (default is 2048)"
	echo "  --nr_cpus=<value | AUTO> (default is 2)"
        echo "  --disk_size=<value in GB | AUTO> (default is 20)"
	echo "  --MAC_address=<xx:xx:xx:xx:xx:xx | AUTO> (default is auto generated mac)"
	echo "  --batch=<true | false> (default is false)" 
	echo " "
	echo "Example usage: ./install_vm --name=test66.dmz5.intern"
	echo " "
	exit 1
}

for i in $*; do
  PARAMETER=`echo ${i} | cut -d '=' -f 1`
  VALUE=`echo ${i} | cut -d '=' -f 2`

  case $PARAMETER in
    --operating_system ) OSINPUT=${VALUE} ;;
    --name ) NAME=`echo ${VALUE} | tr '[:upper:]' '[:lower:]'`;;
    --memory ) VMMEM=${VALUE} ;;
    --description ) VMDESCRIPTION=${VALUE};;
    --intcluster ) VMINTCLUSTER=${VALUE};;
    --max_memory ) VMMAXMEM=${VALUE};;
    --nr_cpus ) VMCPUS=${VALUE};;
    --disk_size ) VMDISKSIZE=${VALUE};;
    --MAC_address ) VMMAC=${VALUE};;
    --batch ) BATCH='true' ;;
    * ) usage; break ;;
  esac

done

if [ ${NAME} == "AUTO" ];then
	usage
fi

VMNETWORK=`echo ${NAME} | cut -d '.' -f 2 | tr [:lower:] [:upper:]`
VMDISK="${VMSTOREDIR}/${VMNETWORK}/VM-${VMNETWORK}-${NAME}.img"


#if [ "${BATCH}" == 'false' ];then
#  read -p 'Which release of SLES (<% @ossettings.each do |os, settings| %><%= "#{os} "%><% end %>): ' OSINPUT

  case $OSINPUT in
  <%- @ossettings.each do |os, settings| -%>
  <%= "  #{os}) echo \"${OSINPUT} selected\";;" %>
  <%- end %>
	AUTO) echo "Autodetecting OS (default OS used)" ;;
	    *)
	      echo "You didn't provide one of the supported operating systems! [FAIL]"
	      usage
	      exit 1;;
  esac
  
#  read -p 'Please give the VM name to install: ' NAME

#fi


<%- i=0 -%>
<%- @ossettings.each do |os, settings| -%>
<%= "OSSETTINGSURL[#{i}]=#{settings['ossettingsurl']}" %>
<%= "SOURCEREPOURL[#{i}]=#{settings['sourcerepourl']}" %>
<%= "VMOSTYPE[#{i}]=#{settings['vmostype']}" %>
<%= "OSRELEASE[#{i}]=#{os}" %>
<%- i += 1 -%>
<%- end -%>

<%- i=0 -%>
<%- @netifmappings.each do |net, settings| -%>
<%= "NETNAME[#{i}]=#{net}" %>
<%= "NETBRIDGE[#{i}]=#{settings['interface']}" %>
<%- i += 1 -%>
<%- end -%>

get_index() {

  for (( index=0; index<${#OSRELEASE[@]}; index++ ));
  do
    if [ "${OSRELEASE[$index]}" == "${OSINPUT}" ];then
      echo $index
      exit
    fi
  done

}

get_ifindex() {

  for (( ifindex=0; ifindex<${#NETNAME[@]}; ifindex++ ));
  do
    if [ "${NETNAME[$ifindex]}" == "${VMNETWORK}" ];then
      echo $ifindex
      exit
    fi
  done
}

index=`get_index`
ifindex=`get_ifindex`

if [ "X${ifindex}" == "X" ];then
	echo "You provided wrong domain name in hostname: ${NAME} [FAIL]"
	usage
	exit 1
fi


verify_dns () {
	NLOOKUP=`nslookup ${NAME} | grep 'Name:' | cut -d ':' -f 2 | tr -d '\t'`

	if [ "X${NAME}" == "X${NLOOKUP}" ];then
        	echo "${NAME} exists in DNS [OK]"
        	#find the IP address
        	ILOOKUP=`nslookup ${NAME} | tail -n2 | grep 'Address:' | cut -d ':' -f 2 | tr -d '\t '`
        	echo "The IP for ${NAME} is: ${ILOOKUP} [OK]"

        	#do a reverse name lookup
        	RLOOKUP=`nslookup ${ILOOKUP} | tail -n2 | grep 'name' | wc -l`
        	if [ $RLOOKUP -eq 1 ];then
                	echo "${ILOOKUP} exists in reverse DNS [OK]"
        	else
                	echo "Reverse DNS record for ${ILOOKUP} missing! [FAIL]"
                	exit 1
        	fi
	else
        	echo "No DNS record found for ${NAME}. You need to setup DNS records first [FAIL]"
        	exit 1
	fi
}

verify_ping () {
	PING=`ping -c 3 ${NAME} | grep '3 received' | wc -l`

	if [ $PING -eq 1 ];then
        	echo "VM machine ${NAME} already exists. You need to destroy it first or provide a new name [FAIL]"
        	exit 1
	else
        	echo "VM ${NAME} is not running or does not exist yet [OK]"
	fi
}

collect_defaults() {
        VMCFG=$1
        if [ ! -f ${VMCFG} ];then
                echo "VM doesn't seem to exist, generating defaults for VM"
                if [ ${VMMEM} == 'AUTO' ];then
                        VMMEM='1024'
                fi
                if [ ${VMMAXMEM} == 'AUTO' ];then
                        VMMAXMEM='2048'
                fi
                if [ ${VMCPUS} == 'AUTO' ];then
                        VMCPUS='2'
                fi
                if [ ${VMDISK} == 'AUTO' ];then
                        VMNETWORK="echo ${NAME} | cut -d '.' -f 2 | tr [:lower:] [:upper:]"
                        VMDISK="${VMSTROREDIR}/${VMNETWORK}/VM-${VMNETWORK}-${NAME}.img"
                fi

                if [ ${VMDISKSIZE} == 'AUTO' ];then
                        VMDISKSIZE='20'
                fi
                if [ ${VMMAC} == 'AUTO' ];then
                        VMMAC=`echo -n '00:16:3e'; dd bs=1 count=3 if=/dev/random 2>/dev/null |hexdump -v -e '/1 ":%02x"'`
                fi

                if [ ${VMBRIDGE} == 'AUTO' ];then
			VMBRIDGE=${NETBRIDGE[${ifindex}]}
                fi

                if [ -f ${VMSTROREDIR}/${VMNETWORK}/VM-${VMNETWORK}-${NAME}.img ];then
                        echo "VM doesn't exist, but a VM image with proposed name already exists! [FAIL]"
                        exit 1
                fi
        else
                echo "VM already seems to exist, getting existing saved VM values"
                if [ ${VMMEM} == 'AUTO' ];then
                        VMMEM=`grep memory= ${VMCFG} | cut -d '=' -f 2`
                fi
                if [ ${VMMAXMEM} == 'AUTO' ];then
                        VMMAXMEM=`grep maxmem= ${VMCFG} | cut -d '=' -f 2`
                fi
                if [ ${VMCPUS} == 'AUTO' ];then
                        VMCPUS=`grep vcpus= ${VMCFG} | cut -d '=' -f 2`
                fi
                if [ ${VMDISK} == 'AUTO' ];then
                        VMDISK=`grep file: ${VMCFG} | cut -d : -f 2 | cut -d , -f 1`
                fi
                if [ ${VMDISKSIZE} == 'AUTO' ];then
                        VMDISKSIZE=`ls -lh ${VMDISK} | awk '{print $5}' | tr -d "[:alpha:]" | cut -d '.' -f 1`
			if [ -z $VMDISKSIZE ];then
				VMDISKSIZE='20'
			fi
                fi
                if [ ${VMMAC} == 'AUTO' ];then
                        VMMAC=`perl -pe 'if (!/mac=/) {s|.*||s;} else { s|.*mac=(.*?),.*|\1|}' ${VMCFG}`
                fi
                if [ ${VMBRIDGE} == 'AUTO' ];then
                        VMBRIDGE=`perl -pe 'if (!/bridge=/) {s|.*||s;} else { s|.*bridge=(.*?),.*|\1|}; s///;' ${VMCFG} | tr -d "'"`
                fi
        fi
}

get_userinput() {
	read -p "memory for the vm (${VMMEM}):" NEWVMMEM
	if [ -n "${NEWVMMEM}" ];then
		VMMEM=${NEWVMMEM}
	fi
	read -p "maxmemory for the vm (${VMMAXMEM}):" NEWVMMAXMEM
	if [ -n "${NEWVMMAXMEM}" ];then
		VMMAXMEM=${NEWVMMAXMEM}
	fi
	read -p "nr CPUs for the vm (${VMCPUS}):" NEWVMCPUS
	if [ -n "${NEWVMCPUS}" ];then
		VMCPUS=${NEWVMCPUS}
	fi
	read -p "disk for the vm (${VMDISK}):" NEWVMDISK
	if [ -n "${NEWVMDISK}" ];then
		VMDISK=${NEWVMDISK}
	fi
	read -p "disk size for the vm in GB (${VMDISKSIZE}):" NEWVMDISKSIZE
	if [ -n "${NEWVMDISKSIZE}" ];then
		VMDISKSIZE=${NEWVMDISKSIZE}
	fi
	read -p "MAC address for the vm (${VMMAC}):" NEWVMMAC
	if [ -n "${NEWVMMAC}" ];then
		VMMAC=${NEWVMMAC}
	fi
	read -p "bridge to be used by the vm (${VMBRIDGE}):" NEWVMBRIDGE
	if [ -n "${NEWVMBRIDGE}" ];then
		VMBRIDGE=${NEWVMBRIDGE}
	fi
}

create_backup() {
	VMCFG=${XENVMDIR}/${NAME}
	if [ -f ${VMCFG} ];then
		echo "creating copy of xen vm config file: ${VMCFG}"
		cp ${VMCFG} ${VMCFG}.${NOW}
	fi 
        if [ -f ${VMDISK} ];then
		echo "creating copy of xen vm config file: ${VMDISK}"
		mv ${VMDISK} ${VMDISK}.${NOW}
	fi
}

provision_vm() {
        #in case user did not delete existing VM from domain management 
        xm delete ${NAME} 2>/dev/null >/dev/null

	VMDISKSIZE=$((${VMDISKSIZE} * 1024))
	if [ "${VMOSTYPE[${index}]}" == "pxe" ];then
		cd ${XENVMDIR} && vm-install --graphics none --vcpus ${VMCPUS} --memory ${VMMEM} \
			--max-mem ${VMMAXMEM}  --disk "file:${VMDISK},xvda,w,${VMDISKSIZE}" \
			--pxe-boot \
			--nic "bridge=${VMBRIDGE},mac=${VMMAC},model=e1000" \
			--keymap=de --full-virt --os-type ${VMOSTYPE[${index}]} --name ${NAME} \
			--background
        #added for UBUNTU14044
        elif [ "${VMOSTYPE[${index}]}" == "ubuntu" ] &&  [ "${OSRELEASE[${index}]}" == "UBUNTU14044" ];then
                cd ${XENVMDIR} && vm-install --os-type ${VMOSTYPE[${index}]} --name ${NAME} --vcpus ${VMCPUS} \
                        --memory ${VMMEM} --max-mem ${VMMAXMEM} \
                        --disk "file:/vms/iso/ubuntu-14.04.4-server-amd64-autoinstall.iso,1,cdrom" \
                        --disk "file:${VMDISK},xvda,w,${VMDISKSIZE},sparse=1" \
                        --nic "bridge=${VMBRIDGE},mac=${VMMAC}" \
                        --keymap=de --para-virt \
            --extra-args "ks=http://oit.dmz5.intern/ks-ubuntu-14.04.4-autoinstall.cfg console=hvc0 xencons=tty" \
                        --graphics cirrus --background
        #added for UBUNTU1604
        elif [ "${VMOSTYPE[${index}]}" == "ubuntu" ] &&  [ "${OSRELEASE[${index}]}" == "UBUNTU1604" ];then
                cd ${XENVMDIR} && vm-install --os-type ${VMOSTYPE[${index}]} --name ${NAME} --vcpus ${VMCPUS} \
                        --memory ${VMMEM} --max-mem ${VMMAXMEM} \
                        --disk "file:/vms/iso/ubuntu-16.04-server-amd64-autoinstall.iso,1,cdrom" \
                        --disk "file:${VMDISK},xvda,w,${VMDISKSIZE}" \
                        --nic "bridge=${VMBRIDGE},mac=${VMMAC}" \
                        --keymap=de --full-virt \
            --extra-args "ks=http://oit.dmz5.intern/ks-ubuntu-16.04-autoinstall.cfg console=hvc0 xencons=tty" \
                        --graphics cirrus --background
        else
		cd ${XENVMDIR} && vm-install --graphics none --vcpus ${VMCPUS} --memory ${VMMEM} \
			--max-mem ${VMMAXMEM}  --disk "file:${VMDISK},xvda,w,${VMDISKSIZE}" \
			--nic "bridge=${VMBRIDGE},mac=${VMMAC}" \
			--keymap=de --para-virt --os-type ${VMOSTYPE[${index}]} --name ${NAME} \
			--os-settings "${OSSETTINGSURL[${index}]}" \
			--source "${SOURCEREPOURL[${index}]}" \
			--background
	fi

	#check that the output of vm-install is error free otherwise bail out
        if [ $? -ne 0 ];then
                exit 1
        fi

}

summary() {
	echo "Using the following values:"
	echo -e "VMMEM:\t\t${VMMEM}"
	echo -e "VMMAXMEM:\t${VMMAXMEM}"
	echo -e "VMCPUS:\t\t${VMCPUS}"
	echo -e "VMDIKS:\t\t${VMDISK}"
	echo -e "VMDISKSIZE:\t${VMDISKSIZE} GB"
	echo -e "VMMAC:\t\t${VMMAC}"
	echo -e "VMBRIDGE:\t$VMBRIDGE"
	ANS=answer
	while [ "X${ANS}" != "XY" -a "X${ANS}" != "XN" ];do
		read -p "Is above information correct (Y/N)? " ANS
		ANS=`echo ${ANS} | tr '[a-z]' '[A-Z]'`
		if [ "X${ANS}" == "XY" ];then
			echo "starting!!!"
			#create_backup
			#provision_vm			
			#sleep 5
			#xm console ${NAME}
		elif [ "X${ANS}" == "XN" ];then
			exit 1
		fi
	done
}

wait_for_install() {
if [ ${BATCH} == 'true' ];then
	echo "Your VM is getting installed in the background on node `hostname -f`."
        echo "It will be available at ${NAME} in a couple of minutes. Please wait..."
	#implement logic to check if vm-install is still running. For OpenBSD VM which
	#is fully virtualized vm-install hands over very quickly and only qemu-dm remains
	VMINSTALL=`ps aux | grep "vm-install.*name ${NAME}" | grep -v grep | wc -l`
	set +x
	while [ $VMINSTALL -eq 1 ];do
        	echo -n "."
        	sleep 60
        	VMINSTALL=`ps aux | grep "vm-install.*name ${NAME}" | grep -v grep | wc -l`
	done
        set -x
	
	#now we can parse and create yaml output from final VM configuration from /etc/xen/vm/fqdn
	echo "Your ${NAME} installation finished. VM ${NAME} is rebooting [OK]"

else
	sleep 5
	xm console ${NAME}
fi
}

generate_yaml () {
	#cat /etc/xen/vm/${NAME}
	VMFILE=${XENVMDIR}/${NAME}
	XVMNAME=`cat ${VMFILE} | grep '^name=' | tr -d '"' | cut -d '=' -f 2`
	XVMDESCRIPTION=`cat ${VMFILE} | grep '^description=' | tr -d '"' | cut -d '=' -f 2`
	XVMUUID=`cat ${VMFILE} | grep '^uuid=' | tr -d '"' | cut -d '=' -f 2`
	XVMMEMORY=`cat ${VMFILE} | grep '^memory=' | tr -d '"' | cut -d '=' -f 2`
	XVMMAXMEM=`cat ${VMFILE} | grep '^maxmem=' | tr -d '"' | cut -d '=' -f 2`
	XVMVCPUS=`cat ${VMFILE} | grep '^vcpus=' | tr -d '"' | cut -d '=' -f 2`
	XVMONPOWEROFF=`cat ${VMFILE} | grep '^on_poweroff=' | tr -d '"' | cut -d '=' -f 2`
	XVMONREBOOT=`cat ${VMFILE} | grep '^on_reboot=' | tr -d '"' | cut -d '=' -f 2`
	XVMONCRASH=`cat ${VMFILE} | grep '^on_crash=' | tr -d '"' | cut -d '=' -f 2`
	XVMLOCALTIME=`cat ${VMFILE} | grep '^localtime=' | tr -d '"' | cut -d '=' -f 2`
	XVMKEYMAP=`cat ${VMFILE} | grep '^keymap=' | tr -d '"' | cut -d '=' -f 2`
	XVMBUILDER=`cat ${VMFILE} | grep '^builder=' | tr -d '"' | cut -d '=' -f 2`
	XVMBOOTLOADER=`cat ${VMFILE} | grep '^bootloader=' | tr -d '"' | cut -d '=' -f 2`
	XVMBOOTARGS=`cat ${VMFILE} | grep '^bootargs=' | tr -d '"' | cut -d '=' -f 2`
	XVMEXTRA=`cat ${VMFILE} | grep '^extra=' | tr -d '"' | cut -d '=' -f 2,3,4,5,6`
	XVMDISK=`cat ${VMFILE} | grep '^disk=' | tr -d '"[]' | cut -d '=' -f 2`
	XVMIF=`cat ${VMFILE} | grep '^vif=' | tr -d '"[]' | cut -d '=' -f 2,3,4,5,6`
	XVMNOGRAPHIC=`cat ${VMFILE} | grep '^nographic=' | tr -d '"' | cut -d '=' -f 2`

	#parse additional variables for vmostype=pxe such as OpenBSD
	if [ "${VMOSTYPE[${index}]}" == "pxe" ];then
		XVMDEVICEMODEL=`cat ${VMFILE} | grep '^device_model=' | tr -d '"' | cut -d '=' -f 2`
		XVMKERNEL=`cat ${VMFILE} | grep '^kernel=' | tr -d '"' | cut -d '=' -f 2`
		XVMBOOT=`cat ${VMFILE} | grep '^boot=' | tr -d '"' | cut -d '=' -f 2`
		XVMVIRIDIAN=`cat ${VMFILE} | grep '^viridian=' | tr -d '"' | cut -d '=' -f 2`
		XVMAPIC=`cat ${VMFILE} | grep '^apic=' | tr -d '"' | cut -d '=' -f 2`
		XVMACPI=`cat ${VMFILE} | grep '^acpi=' | tr -d '"' | cut -d '=' -f 2`
		XVMPAE=`cat ${VMFILE} | grep '^pae=' | tr -d '"' | cut -d '=' -f 2`
		XVMSERIAL=`cat ${VMFILE} | grep '^serial=' | tr -d '"' | cut -d '=' -f 2`
		#OpenBSD install passes a driver model for NIC which we should pick the whole string model=e1000
		XVMIF_MODEL_STRING=`echo ${XVMIF} | grep ',model=' | cut -d ',' -f 3 | tr "'" ' ' | tr -d '[[:space:]]'`
	fi
	#parse additional variables for vmostype=ubuntu such as UBUNTU14044 and UBUNTU1604
	if [ "${VMOSTYPE[${index}]}" == "ubuntu" ];then
		XVMDEVICEMODEL=`cat ${VMFILE} | grep '^device_model=' | tr -d '"' | cut -d '=' -f 2`
		XVMKERNEL=`cat ${VMFILE} | grep '^kernel=' | tr -d '"' | cut -d '=' -f 2`
		XVMBOOT=`cat ${VMFILE} | grep '^boot=' | tr -d '"' | cut -d '=' -f 2`
		XVMSTDVGA=`cat ${VMFILE} | grep '^stdvga=' | tr -d '"' | cut -d '=' -f 2`
		XVMVNC=`cat ${VMFILE} | grep '^vnc=' | tr -d '"' | cut -d '=' -f 2`
		XVMVNCUNUSED=`cat ${VMFILE} | grep '^vncunused=' | tr -d '"' | cut -d '=' -f 2`
		XVMVIRIDIAN=`cat ${VMFILE} | grep '^viridian=' | tr -d '"' | cut -d '=' -f 2`
		XVMACPI=`cat ${VMFILE} | grep '^acpi=' | tr -d '"' | cut -d '=' -f 2`
		XVMPAE=`cat ${VMFILE} | grep '^pae=' | tr -d '"' | cut -d '=' -f 2`
		XVMUSBDEVICE=`cat ${VMFILE} | grep '^usbdevice=' | tr -d "'" | cut -d '=' -f 2`
		XVMSERIAL=`cat ${VMFILE} | grep '^serial=' | tr -d '"' | cut -d '=' -f 2`
		#OpenBSD install passes a driver model for NIC which we should pick the whole string model=e1000
		XVMIF_MODEL_STRING=`echo ${XVMIF} | grep ',model=' | cut -d ',' -f 3 | tr "'" ' ' | tr -d '[[:space:]]'`
	fi

        set +x
	#prepare common outputs for all vmostypes
	echo " " 2>&1
	echo " " 1>&2
	echo " "
	echo "Puppet: prepared yaml to copy/paste to intcluster.yaml in hieradata"
	echo "==================================================================="
	echo "  ${XVMNAME}:"
	echo "    vmname: '${XVMNAME}'"
	echo "    vmdescription: '`echo ${VMDESCRIPTION} | tr '_' ' '`'"
	echo "    vmuuid: '${XVMUUID}'"
	echo "    vmmemory: '${XVMMEMORY}'"
	echo "    vmmaxmem: '${XVMMAXMEM}'"
	echo "    vmvcpus: '${XVMVCPUS}'"
	echo "    vmcpus: '${PROHIBIT_VMCPUS}'"
	echo "    vmon_poweroff: '${XVMONPOWEROFF}'"
	echo "    vmon_reboot: '${XVMONREBOOT}'"
	echo "    vmon_crash: '${XVMONCRASH}'"
	echo "    vmlocaltime: '${XVMLOCALTIME}'"
	echo "    vmkeymap: '${XVMKEYMAP}'"
	echo "    builder: '${XVMBUILDER}'"
	#prepare different outputs depending on the vmostype (sles11 or sles12, pxe, ubuntu)
	if [ "${VMOSTYPE[${index}]}" == "sles11" ] || [ "${VMOSTYPE[${index}]}" == "sles12" ] ;then
		echo "    vmbootloader: '${XVMBOOTLOADER}'"
		echo "    vmbootargs: '${XVMBOOTARGS}'"
		echo "    vmextra: '${XVMEXTRA}'"
		echo "    vmdisks:"
		echo "      -${XVMDISK:0:${#XVMDISK}-2}"
		echo "    vmvifs:"
                echo "      - \"mac=%{hiera('node::${XVMNAME}::macaddr')},bridge=%{hiera('role::xenserver::${VMINTCLUSTER}::bridge::`echo ${VMNETWORK} | tr [:upper:] [:lower:]`')}\" "
		echo "    vmnographic: '${XVMNOGRAPHIC}'"
	#some specific output for vmostype=pxe like OpenBSD
	elif [ "${VMOSTYPE[${index}]}" == "pxe" ];then
		echo "    vmdevicemodel: '${XVMDEVICEMODEL}'"
		echo "    vmkernel: '${XVMKERNEL}'"
		echo "    vmbootorder: '${XVMBOOT}'"
		echo "    vmdisks:"
		echo "      -${XVMDISK:0:${#XVMDISK}-2}"
		echo "    vmvifs:"
		echo "      - \"mac=%{hiera('node::${XVMNAME}::macaddr')},bridge=%{hiera('role::xenserver::${VMINTCLUSTER}::bridge::`echo ${VMNETWORK} | tr [:upper:] [:lower:]`')},${XVMIF_MODEL_STRING}\" "
		echo "    vmnographic: '${XVMNOGRAPHIC}'"
		echo "    vmviridian: '${XVMVIRIDIAN}'"
		echo "    vmapic: '${XVMAPIC}'"
		echo "    vmacpi: '${XVMACPI}'"
		echo "    vmpae: '${XVMPAE}'"
	#some specific output for vmostype=ubuntu like UBUNTU14044 and UBUNTU1604
	elif [ "${VMOSTYPE[${index}]}" == "ubuntu" ];then
		echo "    vmdevicemodel: '${XVMDEVICEMODEL}'"
		echo "    vmkernel: '${XVMKERNEL}'"
		echo "    vmbootorder: '${XVMBOOT}'"
		echo "    vmdisks:"
		echo "      -${XVMDISK:0:${#XVMDISK}-2}"
		echo "    vmvifs:"
		echo "      - \"mac=%{hiera('node::${XVMNAME}::macaddr')},bridge=%{hiera('role::xenserver::${VMINTCLUSTER}::bridge::`echo ${VMNETWORK} | tr [:upper:] [:lower:]`')},${XVMIF_MODEL_STRING}\" "
                echo "    vmstdvga: '${XVMSTDVGA}'"
                echo "    vmvnc: '${XVMVNC}'"
                echo "    vmvncunused: '${XVMVNCUNUSED}'"
		echo "    vmviridian: '${XVMVIRIDIAN}'"
		echo "    vmacpi: '${XVMACPI}'"
		echo "    vmpae: '${XVMPAE}'"
		echo "    vmusbdevice: '${XVMUSBDEVICE}'"
		echo "    vmserial: '${XVMSERIAL}'"
	fi

	echo " "
	echo "Puppet: prepared yaml to copy/paste to default.eyaml in hieradata"
	echo "================================================================="
	echo "node::${XVMNAME}::inet: '${ILOOKUP}'"
	echo "node::${XVMNAME}::macaddr: '${VMMAC}'"
	echo "node::${XVMNAME}::name: '`echo ${NAME} | cut -d '.' -f 1`'"
	echo "node::${XVMNAME}::fqdn: \"%{hiera('node::${XVMNAME}::name')}.%{hiera('network::`echo ${VMNETWORK} | tr [:upper:] [:lower:]`::inet::name')}\""
	echo " "

        set -x
}

verify_dns
verify_ping
collect_defaults ${XENVMDIR}/${NAME}
if [ ${BATCH} == 'false' ];then
	get_userinput
	summary
fi
create_backup
provision_vm
wait_for_install
generate_yaml
